{"version":3,"sources":["home.js","about.js","App.js","serviceWorker.js","index.js"],"names":["Home","headRef","setHeadContent","useEffect","current","innerHTML","About","css","head","document","getElementsByTagName","style","createElement","appendChild","type","styleSheet","cssText","createTextNode","injectStyle","withRouter","history","useRef","useState","headContent","listen","location","pathname","to","exact","path","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAgBeA,MAbf,YAA0C,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,eAMtB,OAJAC,qBAAU,WACRD,EAAeD,EAAQG,QAAQC,aAC9B,IAGD,6BACE,sCCgBSC,MAXf,WAIE,OAHAH,qBAAU,YAfZ,WACE,IAAII,EAAM,kCACRC,EAAOC,SAASD,MAAQC,SAASC,qBAAqB,QAAQ,GAC9DC,EAAQF,SAASG,cAAc,SACjCJ,EAAKK,YAAYF,GACjBA,EAAMG,KAAO,WACTH,EAAMI,WAERJ,EAAMI,WAAWC,QAAUT,EAE3BI,EAAME,YAAYJ,SAASQ,eAAeV,IAM1CW,KACC,IAED,6BACE,uCC0BSC,mBApCf,YAA2B,IAAZC,EAAW,EAAXA,QACPnB,EAAUoB,iBAAOZ,SAASD,MADR,EAGcc,mBAASrB,EAAQG,QAAQC,WAHvC,mBAGjBkB,EAHiB,KAGJrB,EAHI,KAaxB,OARAC,qBAAU,WACRiB,EAAQI,QAAO,WACqB,MAA9BJ,EAAQK,SAASC,WACnBzB,EAAQG,QAAQC,UAAYkB,QAG/B,CAACA,IAGF,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMI,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAGJ,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAM5B,QAASA,EAASC,eAAgBA,KAE1C,kBAAC,IAAD,CAAO2B,KAAK,UACV,kBAAC,EAAD,YC7BUC,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEF1B,SAAS2B,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.98f9d959.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState, useCallback} from 'react';\nimport { withRouter } from 'react-router-dom';\n\nfunction Home({headRef, setHeadContent}) {\n\n  useEffect(() => {\n    setHeadContent(headRef.current.innerHTML)\n  }, [])\n\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nexport default Home","import React, { useEffect } from \"react\";\n\nfunction injectStyle() {\n  var css = \"h2 { background-color: green; }\",\n    head = document.head || document.getElementsByTagName(\"head\")[0],\n    style = document.createElement(\"style\");\n  head.appendChild(style);\n  style.type = \"text/css\";\n  if (style.styleSheet) {\n    // This is required for IE8 and below.\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nfunction About() {\n  useEffect(() => {\n    injectStyle();\n  }, []);\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nexport default About;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from \"react-router-dom\";\nimport Home from \"./home.js\";\nimport About from \"./about\";\n\nfunction App({ history }) {\n  const headRef = useRef(document.head);\n\n  const [headContent, setHeadContent] = useState(headRef.current.innerHTML);\n\n  useEffect(() => {\n    history.listen(() => {\n      if (history.location.pathname === \"/\") {\n        headRef.current.innerHTML = headContent;\n      }\n    });\n  }, [headContent]);\n\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/about\">About</Link>\n        </li>\n      </ul>\n      <hr />\n      <Switch>\n        <Route exact path=\"/\">\n          <Home headRef={headRef} setHeadContent={setHeadContent} />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}